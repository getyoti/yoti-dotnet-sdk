# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
  branches:
    include:
    - '*'  # must quote since "*" is a YAML reserved character; we want a string

schedules:
- cron: "0 12 * * 0"
  displayName: Weekly Sunday build
  branches:
    include:
    - master
  always: true

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

steps:
# STEP 1: PREPARE ANALYSIS ON SONARCLOUD
# Updated to the modern and correct @2 version. All inputs are preserved.
- task: SonarCloudPrepare@2 # <-- CHANGED from @1 to @2
  displayName: 'SonarCloud: Prepare Analysis'
  inputs:
    SonarCloud: 'Yoti SonarCloud'
    organization: 'yoti'
    scannerMode: 'MSBuild'
    projectKey: 'getyoti:dotnet'
    projectName: 'dotnet-sdk'
    projectVersion: '3.18.0'
    extraProperties: |
      sonar.cs.opencover.reportsPaths="$(Build.SourcesDirectory)/**/*coverage.opencover.xml"
      sonar.links.scm=https://github.com/getyoti/yoti-dotnet-sdk
      sonar.exclusions=src/Yoti.Auth/ProtoBuf/**,src/Examples/**,**/obj/**,**/*.dll,src/Yoti.Auth/DigitalIdentity/**

# STEP 2: RESTORE, BUILD, AND TEST
# These steps are required for the SonarCloud analysis to work correctly.
- task: NuGetToolInstaller@1

- task: NuGetCommand@2
  displayName: 'NuGet: Restore Solution'
  inputs:
    restoreSolution: '$(solution)'

- task: VSBuild@1
  displayName: 'Build: Build Solution'
  inputs:
    solution: '$(solution)'
    msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=false /p:DesktopBuildPackageLocation="$(build.artifactStagingDirectory)\WebApp.zip" /p:DeployIisAppPath="Default Web Site"'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

# Run tests to generate coverage reports for both Azure DevOps and SonarCloud
- task: DotNetCoreCLI@2
  displayName: 'Test: Generate Cobertura & OpenCover reports'
  inputs:
    command: test
    arguments: '--configuration $(BuildConfiguration) --logger trx /p:CollectCoverage=true /p:CoverletOutputFormat="cobertura,opencover" /p:Exclude="[*]Yoti.Auth.ProtoBuf.*" /p:ExcludeByAttribute="GeneratedCodeAttribute"'
    projects: '**/*Tests/*.csproj'
    nobuild: true

# STEP 3: PUBLISH COVERAGE TO AZURE DEVOPS (Optional, for UI display)
# This section generates and publishes the Cobertura report for the Azure DevOps UI.
- task: DotNetCoreCLI@2
  displayName: 'ReportGenerator: Install Tool'
  inputs:
    command: custom
    custom: tool
    arguments: install --tool-path . dotnet-reportgenerator-globaltool

- script: reportgenerator "-reports:$(Build.SourcesDirectory)/**/*coverage.cobertura.xml" "-targetdir:$(Build.SourcesDirectory)/CodeCoverage" -reporttypes:Cobertura
  displayName: 'ReportGenerator: Create Cobertura Report'

- task: PublishCodeCoverageResults@1
  displayName: 'Azure DevOps: Publish Cobertura Coverage'
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: '$(Build.SourcesDirectory)/CodeCoverage/Cobertura.xml'

# STEP 4: RUN SONARCLOUD ANALYSIS
# This task collects the data from the build and test steps.
- task: SonarCloudAnalyze@2 # <-- CHANGED from @1 to @2
  displayName: 'SonarCloud: Run Code Analysis'

# STEP 5: PUBLISH SONARCLOUD QUALITY GATE
# This task pushes the results to SonarCloud and checks the Quality Gate.
- task: SonarCloudPublish@1 # <-- CHANGED from @1 to @2
  displayName: 'SonarCloud: Publish Quality Gate Result'
  inputs:
    pollingTimeoutSec: '300'
