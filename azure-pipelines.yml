# Complete CI/CD Pipeline with SonarCloud integration for release/3.18.0
# Fixed issues:
# ✅ Organization: 'yoti' (was 'getyoti')  
# ✅ Project Key: 'dotnet-sdk' (correct project in SonarCloud)
# ✅ Step Order: SonarCloudPrepare → Build → SonarCloudAnalyze (MSBuild integration)
# ✅ Task Version: @1 (stable version)

trigger:
  branches:
    include:
    - release/3.18.0

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

steps:
# 1. Install tools
- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    version: '8.x'
  displayName: 'Install .NET 8.0 SDK'

- task: NuGetToolInstaller@1
  displayName: 'Install NuGet tools'

# 2. SonarCloud PREPARE (must be BEFORE build for MSBuild integration)
- task: SonarCloudPrepare@1
  inputs:
    SonarCloud: 'Yoti SonarCloud'
    organization: 'yoti'
    scannerMode: 'MSBuild'
    projectKey: 'dotnet-sdk'
    projectName: 'dotnet-sdk'
    projectVersion: '3.18.0'
    extraProperties: |
      sonar.exclusions=src/Yoti.Auth/ProtoBuf/**,src/Examples/**,**/obj/**,**/*.dll
  displayName: 'SonarCloud Prepare Analysis'

# 3. Build steps
- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'
  displayName: 'Restore NuGet packages'

- task: VSBuild@1
  inputs:
    solution: '$(solution)'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
    msbuildArgs: '/p:SkipInvalidConfigurations=false'
  displayName: 'Build solution'

# 4. Run tests with code coverage
- task: VSTest@2
  inputs:
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
    codeCoverageEnabled: true
    testAssemblyVer2: |
      **\*test*.dll
      !**\*TestAdapter.dll
      !**\obj\**
  displayName: 'Run Tests with Code Coverage'

# 5. SonarCloud ANALYZE (must be AFTER build)
- task: SonarCloudAnalyze@1
  displayName: 'SonarCloud Code Analysis'

# 6. Publish results
- task: SonarCloudPublish@1
  inputs:
    pollingTimeoutSec: '300'
  displayName: 'SonarCloud Publish Quality Gate Result'

- task: PublishTestResults@2
  inputs:
    testResultsFormat: 'VSTest'
    testResultsFiles: '**/*.trx'
    failTaskOnFailedTests: true
  displayName: 'Publish Test Results'
  condition: always()

- task: PublishCodeCoverageResults@2
  inputs:
    summaryFileLocation: '$(Agent.TempDirectory)/**/*.coverage'
    codeCoverageRunConfigurationFile: '$(Agent.TempDirectory)/**/*.runsettings'
  displayName: 'Publish Code Coverage Results'
  condition: always()
